// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package project

import (
	"fluxton/internal/domain/project"
	"fluxton/internal/domain/shared"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository) Create(project1 *project.Project) (*project.Project, error) {
	ret := _mock.Called(project1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *project.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*project.Project) (*project.Project, error)); ok {
		return returnFunc(project1)
	}
	if returnFunc, ok := ret.Get(0).(func(*project.Project) *project.Project); ok {
		r0 = returnFunc(project1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*project.Project) error); ok {
		r1 = returnFunc(project1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - project1
func (_e *MockRepository_Expecter) Create(project1 interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", project1)}
}

func (_c *MockRepository_Create_Call) Run(run func(project1 *project.Project)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*project.Project))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(project11 *project.Project, err error) *MockRepository_Create_Call {
	_c.Call.Return(project11, err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(project1 *project.Project) (*project.Project, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository) Delete(projectUUID uuid.UUID) (bool, error) {
	ret := _mock.Called(projectUUID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (bool, error)); ok {
		return returnFunc(projectUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = returnFunc(projectUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(projectUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - projectUUID
func (_e *MockRepository_Expecter) Delete(projectUUID interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", projectUUID)}
}

func (_c *MockRepository_Delete_Call) Run(run func(projectUUID uuid.UUID)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(b bool, err error) *MockRepository_Delete_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(projectUUID uuid.UUID) (bool, error)) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByNameForOrganization provides a mock function for the type MockRepository
func (_mock *MockRepository) ExistsByNameForOrganization(name string, organizationUUID uuid.UUID) (bool, error) {
	ret := _mock.Called(name, organizationUUID)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByNameForOrganization")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) (bool, error)); ok {
		return returnFunc(name, organizationUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, uuid.UUID) bool); ok {
		r0 = returnFunc(name, organizationUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = returnFunc(name, organizationUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ExistsByNameForOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByNameForOrganization'
type MockRepository_ExistsByNameForOrganization_Call struct {
	*mock.Call
}

// ExistsByNameForOrganization is a helper method to define mock.On call
//   - name
//   - organizationUUID
func (_e *MockRepository_Expecter) ExistsByNameForOrganization(name interface{}, organizationUUID interface{}) *MockRepository_ExistsByNameForOrganization_Call {
	return &MockRepository_ExistsByNameForOrganization_Call{Call: _e.mock.On("ExistsByNameForOrganization", name, organizationUUID)}
}

func (_c *MockRepository_ExistsByNameForOrganization_Call) Run(run func(name string, organizationUUID uuid.UUID)) *MockRepository_ExistsByNameForOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_ExistsByNameForOrganization_Call) Return(b bool, err error) *MockRepository_ExistsByNameForOrganization_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_ExistsByNameForOrganization_Call) RunAndReturn(run func(name string, organizationUUID uuid.UUID) (bool, error)) *MockRepository_ExistsByNameForOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByUUID provides a mock function for the type MockRepository
func (_mock *MockRepository) ExistsByUUID(id uuid.UUID) (bool, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByUUID")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (bool, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ExistsByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByUUID'
type MockRepository_ExistsByUUID_Call struct {
	*mock.Call
}

// ExistsByUUID is a helper method to define mock.On call
//   - id
func (_e *MockRepository_Expecter) ExistsByUUID(id interface{}) *MockRepository_ExistsByUUID_Call {
	return &MockRepository_ExistsByUUID_Call{Call: _e.mock.On("ExistsByUUID", id)}
}

func (_c *MockRepository_ExistsByUUID_Call) Run(run func(id uuid.UUID)) *MockRepository_ExistsByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_ExistsByUUID_Call) Return(b bool, err error) *MockRepository_ExistsByUUID_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_ExistsByUUID_Call) RunAndReturn(run func(id uuid.UUID) (bool, error)) *MockRepository_ExistsByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUUID provides a mock function for the type MockRepository
func (_mock *MockRepository) GetByUUID(projectUUID uuid.UUID) (project.Project, error) {
	ret := _mock.Called(projectUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUUID")
	}

	var r0 project.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (project.Project, error)); ok {
		return returnFunc(projectUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) project.Project); ok {
		r0 = returnFunc(projectUUID)
	} else {
		r0 = ret.Get(0).(project.Project)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(projectUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUUID'
type MockRepository_GetByUUID_Call struct {
	*mock.Call
}

// GetByUUID is a helper method to define mock.On call
//   - projectUUID
func (_e *MockRepository_Expecter) GetByUUID(projectUUID interface{}) *MockRepository_GetByUUID_Call {
	return &MockRepository_GetByUUID_Call{Call: _e.mock.On("GetByUUID", projectUUID)}
}

func (_c *MockRepository_GetByUUID_Call) Run(run func(projectUUID uuid.UUID)) *MockRepository_GetByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_GetByUUID_Call) Return(project1 project.Project, err error) *MockRepository_GetByUUID_Call {
	_c.Call.Return(project1, err)
	return _c
}

func (_c *MockRepository_GetByUUID_Call) RunAndReturn(run func(projectUUID uuid.UUID) (project.Project, error)) *MockRepository_GetByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseNameByUUID provides a mock function for the type MockRepository
func (_mock *MockRepository) GetDatabaseNameByUUID(projectUUID uuid.UUID) (string, error) {
	ret := _mock.Called(projectUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseNameByUUID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (string, error)); ok {
		return returnFunc(projectUUID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = returnFunc(projectUUID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(projectUUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetDatabaseNameByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseNameByUUID'
type MockRepository_GetDatabaseNameByUUID_Call struct {
	*mock.Call
}

// GetDatabaseNameByUUID is a helper method to define mock.On call
//   - projectUUID
func (_e *MockRepository_Expecter) GetDatabaseNameByUUID(projectUUID interface{}) *MockRepository_GetDatabaseNameByUUID_Call {
	return &MockRepository_GetDatabaseNameByUUID_Call{Call: _e.mock.On("GetDatabaseNameByUUID", projectUUID)}
}

func (_c *MockRepository_GetDatabaseNameByUUID_Call) Run(run func(projectUUID uuid.UUID)) *MockRepository_GetDatabaseNameByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_GetDatabaseNameByUUID_Call) Return(s string, err error) *MockRepository_GetDatabaseNameByUUID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockRepository_GetDatabaseNameByUUID_Call) RunAndReturn(run func(projectUUID uuid.UUID) (string, error)) *MockRepository_GetDatabaseNameByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUUIDByProjectUUID provides a mock function for the type MockRepository
func (_mock *MockRepository) GetOrganizationUUIDByProjectUUID(id uuid.UUID) (uuid.UUID, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUUIDByProjectUUID")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (uuid.UUID, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) uuid.UUID); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetOrganizationUUIDByProjectUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUUIDByProjectUUID'
type MockRepository_GetOrganizationUUIDByProjectUUID_Call struct {
	*mock.Call
}

// GetOrganizationUUIDByProjectUUID is a helper method to define mock.On call
//   - id
func (_e *MockRepository_Expecter) GetOrganizationUUIDByProjectUUID(id interface{}) *MockRepository_GetOrganizationUUIDByProjectUUID_Call {
	return &MockRepository_GetOrganizationUUIDByProjectUUID_Call{Call: _e.mock.On("GetOrganizationUUIDByProjectUUID", id)}
}

func (_c *MockRepository_GetOrganizationUUIDByProjectUUID_Call) Run(run func(id uuid.UUID)) *MockRepository_GetOrganizationUUIDByProjectUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_GetOrganizationUUIDByProjectUUID_Call) Return(uUID uuid.UUID, err error) *MockRepository_GetOrganizationUUIDByProjectUUID_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockRepository_GetOrganizationUUIDByProjectUUID_Call) RunAndReturn(run func(id uuid.UUID) (uuid.UUID, error)) *MockRepository_GetOrganizationUUIDByProjectUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUUIDByDatabaseName provides a mock function for the type MockRepository
func (_mock *MockRepository) GetUUIDByDatabaseName(dbName string) (uuid.UUID, error) {
	ret := _mock.Called(dbName)

	if len(ret) == 0 {
		panic("no return value specified for GetUUIDByDatabaseName")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (uuid.UUID, error)); ok {
		return returnFunc(dbName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) uuid.UUID); ok {
		r0 = returnFunc(dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(dbName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetUUIDByDatabaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUUIDByDatabaseName'
type MockRepository_GetUUIDByDatabaseName_Call struct {
	*mock.Call
}

// GetUUIDByDatabaseName is a helper method to define mock.On call
//   - dbName
func (_e *MockRepository_Expecter) GetUUIDByDatabaseName(dbName interface{}) *MockRepository_GetUUIDByDatabaseName_Call {
	return &MockRepository_GetUUIDByDatabaseName_Call{Call: _e.mock.On("GetUUIDByDatabaseName", dbName)}
}

func (_c *MockRepository_GetUUIDByDatabaseName_Call) Run(run func(dbName string)) *MockRepository_GetUUIDByDatabaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_GetUUIDByDatabaseName_Call) Return(uUID uuid.UUID, err error) *MockRepository_GetUUIDByDatabaseName_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockRepository_GetUUIDByDatabaseName_Call) RunAndReturn(run func(dbName string) (uuid.UUID, error)) *MockRepository_GetUUIDByDatabaseName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRepository
func (_mock *MockRepository) List(paginationParams shared.PaginationParams) ([]project.Project, error) {
	ret := _mock.Called(paginationParams)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []project.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(shared.PaginationParams) ([]project.Project, error)); ok {
		return returnFunc(paginationParams)
	}
	if returnFunc, ok := ret.Get(0).(func(shared.PaginationParams) []project.Project); ok {
		r0 = returnFunc(paginationParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]project.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(shared.PaginationParams) error); ok {
		r1 = returnFunc(paginationParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - paginationParams
func (_e *MockRepository_Expecter) List(paginationParams interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", paginationParams)}
}

func (_c *MockRepository_List_Call) Run(run func(paginationParams shared.PaginationParams)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(shared.PaginationParams))
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(projects []project.Project, err error) *MockRepository_List_Call {
	_c.Call.Return(projects, err)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(paginationParams shared.PaginationParams) ([]project.Project, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListForUser provides a mock function for the type MockRepository
func (_mock *MockRepository) ListForUser(paginationParams shared.PaginationParams, authUserId uuid.UUID) ([]project.Project, error) {
	ret := _mock.Called(paginationParams, authUserId)

	if len(ret) == 0 {
		panic("no return value specified for ListForUser")
	}

	var r0 []project.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(shared.PaginationParams, uuid.UUID) ([]project.Project, error)); ok {
		return returnFunc(paginationParams, authUserId)
	}
	if returnFunc, ok := ret.Get(0).(func(shared.PaginationParams, uuid.UUID) []project.Project); ok {
		r0 = returnFunc(paginationParams, authUserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]project.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(shared.PaginationParams, uuid.UUID) error); ok {
		r1 = returnFunc(paginationParams, authUserId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ListForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListForUser'
type MockRepository_ListForUser_Call struct {
	*mock.Call
}

// ListForUser is a helper method to define mock.On call
//   - paginationParams
//   - authUserId
func (_e *MockRepository_Expecter) ListForUser(paginationParams interface{}, authUserId interface{}) *MockRepository_ListForUser_Call {
	return &MockRepository_ListForUser_Call{Call: _e.mock.On("ListForUser", paginationParams, authUserId)}
}

func (_c *MockRepository_ListForUser_Call) Run(run func(paginationParams shared.PaginationParams, authUserId uuid.UUID)) *MockRepository_ListForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(shared.PaginationParams), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_ListForUser_Call) Return(projects []project.Project, err error) *MockRepository_ListForUser_Call {
	_c.Call.Return(projects, err)
	return _c
}

func (_c *MockRepository_ListForUser_Call) RunAndReturn(run func(paginationParams shared.PaginationParams, authUserId uuid.UUID) ([]project.Project, error)) *MockRepository_ListForUser_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepository
func (_mock *MockRepository) Update(project1 *project.Project) (*project.Project, error) {
	ret := _mock.Called(project1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *project.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*project.Project) (*project.Project, error)); ok {
		return returnFunc(project1)
	}
	if returnFunc, ok := ret.Get(0).(func(*project.Project) *project.Project); ok {
		r0 = returnFunc(project1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*project.Project) error); ok {
		r1 = returnFunc(project1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - project1
func (_e *MockRepository_Expecter) Update(project1 interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", project1)}
}

func (_c *MockRepository_Update_Call) Run(run func(project1 *project.Project)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*project.Project))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(project11 *project.Project, err error) *MockRepository_Update_Call {
	_c.Call.Return(project11, err)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(project1 *project.Project) (*project.Project, error)) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatusByDatabaseName provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateStatusByDatabaseName(databaseName string, status string) (bool, error) {
	ret := _mock.Called(databaseName, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusByDatabaseName")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return returnFunc(databaseName, status)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(databaseName, status)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(databaseName, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateStatusByDatabaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatusByDatabaseName'
type MockRepository_UpdateStatusByDatabaseName_Call struct {
	*mock.Call
}

// UpdateStatusByDatabaseName is a helper method to define mock.On call
//   - databaseName
//   - status
func (_e *MockRepository_Expecter) UpdateStatusByDatabaseName(databaseName interface{}, status interface{}) *MockRepository_UpdateStatusByDatabaseName_Call {
	return &MockRepository_UpdateStatusByDatabaseName_Call{Call: _e.mock.On("UpdateStatusByDatabaseName", databaseName, status)}
}

func (_c *MockRepository_UpdateStatusByDatabaseName_Call) Run(run func(databaseName string, status string)) *MockRepository_UpdateStatusByDatabaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_UpdateStatusByDatabaseName_Call) Return(b bool, err error) *MockRepository_UpdateStatusByDatabaseName_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRepository_UpdateStatusByDatabaseName_Call) RunAndReturn(run func(databaseName string, status string) (bool, error)) *MockRepository_UpdateStatusByDatabaseName_Call {
	_c.Call.Return(run)
	return _c
}
